-- Create the database
CREATE DATABASE stbcStore;
USE stbcStore;

-- Create the VerifiedStatus table and insert initial data
CREATE TABLE VerifiedStatus (
    verifiedID INT NOT NULL PRIMARY KEY,
    verifiedStatus VARCHAR(30) NOT NULL
);
INSERT INTO VerifiedStatus (verifiedID, verifiedStatus)
VALUES (0, 'Unverified'), (1, 'Verified');

-- Create the AccessLevel table and insert initial data
CREATE TABLE AccessLevel (
    accessLevelID INT NOT NULL PRIMARY KEY,
    accessLevel VARCHAR(50) NOT NULL
);
INSERT INTO AccessLevel (accessLevelID, accessLevel) VALUES
(0, 'Guest'), (1, 'Customer'), (2, 'Staff'), (3, 'Admin');

-- Create the User table
CREATE TABLE `User` (
    `userID` INT NOT NULL AUTO_INCREMENT,
    `username` VARCHAR(100) NOT NULL UNIQUE,
    `password` VARCHAR(100),
    `salt` VARCHAR(50),
    `email` VARCHAR(150) NOT NULL UNIQUE,
    `gender` VARCHAR(20) NOT NULL,
    `phoneNumber` VARCHAR(100) NOT NULL,
    `avatarImg` VARCHAR(200),
    `firstName` VARCHAR(150) NOT NULL,
    `lastName` VARCHAR(150) NOT NULL,
    `verifyToken` VARCHAR(100),
    `verifiedStatus` INT NOT NULL,
    `accessLevel` INT NOT NULL,
    `googleID` VARCHAR(100),
    `OAuthProvider` VARCHAR(50),
    `OAuthToken` VARCHAR(255),
    PRIMARY KEY (`userID`),
    FOREIGN KEY (`verifiedStatus`) REFERENCES VerifiedStatus(`verifiedID`),
    FOREIGN KEY (`accessLevel`) REFERENCES AccessLevel(`accessLevelID`)
);

INSERT INTO user(username, password, salt, email, gender, phonenumber, avatarImg, firstname, lastname, verifyToken, verifiedStatus, accessLevel, googleID, OAuthProvider)
VALUES ('john_doe', 'password123', 'saltValue', 'john.doe@example.com', 'Male', '1234567890', 'http://localhost:8080/stbcStore/img/test.png', 'John', 'Doe', 'verifyToken123', 3, 'user', 'google123', 'Google');


-- Create the UserPaymentInfo table
CREATE TABLE UserPaymentInfo (
    paymentID INT NOT NULL AUTO_INCREMENT,
    userID INT NOT NULL,
    creditCardNumber VARCHAR(100) NOT NULL,
    deliveryLocation VARCHAR(200) NOT NULL,
    phoneNumber VARCHAR(100) NOT NULL,
    receiverName VARCHAR(200) NOT NULL,
    PRIMARY KEY (paymentID),
    FOREIGN KEY (userID) REFERENCES `User`(userID)
);

-- Create the PostCategoryTemplate table and insert initial data
CREATE TABLE PostCategoryTemplate (
    categoryID INT NOT NULL PRIMARY KEY,
    category VARCHAR(100) NOT NULL
);
INSERT INTO PostCategoryTemplate (categoryID, category)
VALUES (0, 'Announcement'), (1, 'Promotional');

-- Create the Post table
CREATE TABLE Post (
    postID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    userID INT NOT NULL,
    updatedDate DATE NOT NULL,
    title VARCHAR(200) NOT NULL,
    detail VARCHAR(1000) NOT NULL,
    category INT NOT NULL,
    postImg VARCHAR(200),
    FOREIGN KEY (userID) REFERENCES `User`(userID),
    FOREIGN KEY (category) REFERENCES PostCategoryTemplate(categoryID)
);
INSERT INTO Post (userID, updatedDate, title, detail, category, postImg) 
VALUES 
(1, '2024-07-23', 'Summer Sale Announcement', 'Get ready for our biggest summer sale!', '0', 'http://localhost:8080/stbcStore/img/postImg/test.png'),
(1, '2024-07-23', 'New Product Launch', 'We are excited to launch our new product line.', '1', 'http://localhost:8080/stbcStore/img/postImg/test.png'),
(1, '2024-07-23', 'Holiday Discount Offers', 'Exclusive holiday discounts for our loyal customers.', '1', 'http://localhost:8080/stbcStore/img/postImg/test.png'),
(1, '2024-07-23', 'Winter Collection Preview', 'Preview of our upcoming winter collection.', '0', 'postImg'),
(1, '2024-07-23', 'Flash Sale Event', 'Don\'t miss our 24-hour flash sale event.', '1', 'postImg');


-- Create the Product table
CREATE TABLE Product (
    productID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(200) NOT NULL unique,
    priceIn FLOAT NOT NULL,
    priceOut FLOAT NOT NULL,
    numbersSold INT NOT NULL DEFAULT 0,
    details VARCHAR(500) NOT NULL,
    quantityInStock INT NOT NULL,
    productImg VARCHAR(200) NOT NULL,
    gender INT NOT NULL,
    season INT NOT NULL,
    category INT NOT NULL,
    isActive int not null default 1,
);
INSERT INTO product (title, priceIn, priceOut, numbersSold, details, quantityInStock, productImg, gender, season, category) 
VALUES ('Summer T-Shirt', 10.50, 15.99, 0, 'A cool and comfortable summer t-shirt.', 100, 'http://localhost:8080/stbcStore/img/productImg/test.png', '0', '2', '4'),
       ('Winter T-Shirt', 10.50, 15.99, 0, 'A warm and comfortable winter t-shirt.', 100, 'http://localhost:8080/stbcStore/img/productImg/test.png', '0', '3', '4'),
       ('Summer Shorts', 10.50, 15.99, 0, 'A cool and comfortable summer shorts.', 100, 'http://localhost:8080/stbcStore/img/productImg/test.png', '0', '2', '5'),
       ('Spring T-Shirt', 11.00, 16.50, 0, 'A light and comfortable spring t-shirt.', 120, 'http://localhost:8080/stbcStore/img/productImg/test.png', '0', '2', '4'),
       ('Autumn T-Shirt', 12.00, 17.50, 0, 'A cozy and stylish autumn t-shirt.', 110, 'http://localhost:8080/stbcStore/img/productImg/test.png', '0', '3', '4'),
       ('Spring Shorts', 11.00, 16.50, 0, 'Light and comfortable spring shorts.', 120, 'http://localhost:8080/stbcStore/img/productImg/test.png', '0', '2', '5'),
       ('Winter Shorts', 12.00, 17.50, 0, 'Warm and comfortable winter shorts.', 110, 'http://localhost:8080/stbcStore/img/productImg/test.png', '0', '3', '5');


-- Create the ProductCategoryTemplate table and insert initial data
CREATE TABLE ProductCategoryTemplate (
    categoryID INT NOT NULL PRIMARY KEY,
    category VARCHAR(100) NOT NULL
);
INSERT INTO ProductCategoryTemplate (categoryID, category)
VALUES (0, 'Male'), (1, 'Female'), (2, 'SS'), (3, 'FW'), (4, 'Top'), (5, 'Bottom'), (6, 'Outerwear'), (7, 'Underwear');



-- Create the Cart table
CREATE TABLE Cart (
    userID INT NOT NULL,
    productID INT NOT NULL,
    quantity INT NOT NULL,
    PRIMARY KEY (userID, productID),
    FOREIGN KEY (userID) REFERENCES `User`(userID),
    FOREIGN KEY (productID) REFERENCES Product(productID)
);

-- Create the Feedback table
CREATE TABLE Feedback (
    feedbackID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    username varchar(100) NOT NULL,
    productName varchar(200) NOT NULL,
    feedbackDetail VARCHAR(500) NOT NULL,
    star INT NOT NULL,
    attachedImg VARCHAR(200),
    feedbackDate DATE NOT NULL,
    FOREIGN KEY (username) REFERENCES `User`(username),
    FOREIGN KEY (productName) REFERENCES Product(productName),
    UNIQUE (username, productName)
);

-- Create the OrderStatusTemplate table and insert initial data
CREATE TABLE OrderStatusTemplate (
    orderStatusID INT NOT NULL PRIMARY KEY,
    orderStatus VARCHAR(50) NOT NULL
);
INSERT INTO OrderStatusTemplate (orderStatusID, orderStatus) VALUES
(0, 'Preparing'), (1, 'Delivering'), (2, 'Delivered'), (3, 'Returned'), (4, 'Cancelled');

-- Create the Orders table
CREATE TABLE Orders (
    orderID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    username varchar(100) NOT NULL,
    orderDate DATE NOT NULL,
    receivedDate DATE,
    totalAmount FLOAT NOT NULL,
    status INT NOT NULL,
    FOREIGN KEY (userID) REFERENCES `User`(username),
    FOREIGN KEY (status) REFERENCES OrderStatusTemplate(orderStatusID)
);

-- Create the OrderDetails table
CREATE TABLE OrderDetails (
    orderID INT NOT NULL,
    productName varchar(200) NOT NULL,
    amount INT NOT NULL,
    price FLOAT NOT NULL,
    PRIMARY KEY (orderID, productName),
    FOREIGN KEY (orderID) REFERENCES Orders(orderID),
    FOREIGN KEY (productName) REFERENCES Product(productName)
);

-- Create the PaymentStatusTemplate table and insert initial data
CREATE TABLE PaymentStatusTemplate (
    paymentStatusID INT NOT NULL PRIMARY KEY,
    paymentStatus VARCHAR(50) NOT NULL
);
INSERT INTO PaymentStatusTemplate (paymentStatusID, paymentStatus) VALUES
(0, 'Unpaid'), (1, 'Paid'), (2, 'Cancelled');

-- Create the Payment table
CREATE TABLE Payment (
    paymentID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    userID INT NOT NULL,
    orderID INT NOT NULL,
    paymentAmount FLOAT NOT NULL,
    paymentTime DATETIME NOT NULL,
    status INT NOT NULL,
    FOREIGN KEY (userID) REFERENCES `User`(userID),
    FOREIGN KEY (orderID) REFERENCES Orders(orderID),
    FOREIGN KEY (status) REFERENCES PaymentStatusTemplate(paymentStatusID)
);

-- Create the Settings table
CREATE TABLE Settings (
    settingsID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    settingsType VARCHAR(100) NOT NULL,
    settingsValue VARCHAR(100) NOT NULL,
    settingsStatus INT NOT NULL
);
